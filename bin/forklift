#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

from typing import List
from pathlib import Path

import obsah


class ApplicationConfig(obsah.ApplicationConfig):
    """
    A class describing the where to find various files
    """

    @staticmethod
    def name() -> str:
        """
        Return the name as shown to the user in the ArgumentParser
        """
        return 'forklift'

    @staticmethod
    def target_name() -> str:
        """
        Return the name of the target in the playbook if the playbook takes a parameter.
        """
        return 'pipeline'

    @staticmethod
    def data_path() -> Path:
        """
        Returns the root of the project
        """
        return Path(__file__).absolute().parent.parent

    @classmethod
    def playbooks_path(cls: obsah.ApplicationConfig) -> str:
        """
        Return the data path. Houses playbooks and configs.
        """
        return (cls.data_path() / 'pipelines').as_posix()

    @classmethod
    def playbooks(cls: obsah.ApplicationConfig) -> List[obsah.Playbook]:
        """
        Return all playbooks in the playbook path.
        """
        paths = Path(cls.playbooks_path()).glob('*/*.yaml')
        return sorted(obsah.Playbook(playbook_path.as_posix(), cls) for playbook_path in paths
                      if playbook_path.stem == playbook_path.parent.name)

    @classmethod
    def inventory_path(cls) -> str:
        """
        Return the inventory path
        """
        return (cls.data_path() / 'inventories').as_posix()


if __name__ == '__main__':
    obsah.main(application_config=ApplicationConfig)
