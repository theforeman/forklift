---
- name: install server
  hosts:
   - "{{ forklift_server_name }}"
  become: yes
  vars_files:
    - ../vars/clone_base.yml
    - ../vars/repos_staging.yml
  tasks:
    - name: create backup dir
      file:
        path: "{{ backup_dir }}"
        state: directory
    - name: download backup files
      get_url:
        dest: "{{ backup_dir }}/{{ item }}"
        url: "{{ clone_source_url }}/{{ item }}"
      loop: "{{ backup_files[clone_type] }}"
    - name: install satellite-clone dependencies
      package:
        name:
          - ansible-core
          - git-core
          - rubygem-foreman_maintain
        state: present
    - name: clone satellite-clone
      git:
        repo: "{{ clone_repo }}"
        dest: "{{ clone_repo_dest }}"
        version: "{{ clone_version }}"
    - name: create /usr/sbin/satellite-clone
      ansible.builtin.file:
        src: "{{ clone_repo_dest }}/bin/satellite-clone"
        dest: /usr/sbin/satellite-clone
        state: link
    - name: create /var/log/satellite-clone
      ansible.builtin.file:
        path: /var/log/satellite-clone
        state: directory
    - name: write satellite-clone-vars.yml
      copy:
        dest: "{{ clone_repo_dest }}/satellite-clone-vars.yml"
        content: |
          enable_repos: false
          backup_dir: "{{ backup_dir }}"
          satellite_scenario: katello
          satellite_package: katello
          satellite_installer_cmd: foreman-installer
          satellite_module: katello
    - name: call clone
      # to silly me tomorrow: yes, this needs to be shell, not command
      # why? sat-clone uses "$PWD" and that's not updated to the chdir below if you use command
      shell: satellite-clone --assume-yes
      environment:
        SATELLITE_CLONE_FORCE_VERSION: "{{ clone_satellite_version }}"
