---
- name: "Set group name"
  ansible.builtin.set_fact:
    unprivileged_user_groupname: "{{ unprivileged_user_primary_group | default(unprivileged_user_username) }}"

- name: "Create groups"
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  with_items: "{{ unprivileged_user_additional_groups + [unprivileged_user_groupname] }}"
  become: true

- name: "Create the {{ unprivileged_user_username }} user"
  ansible.builtin.user:
    name: "{{ unprivileged_user_username }}"
    groups: "{{ unprivileged_user_additional_groups + [unprivileged_user_groupname] }}"
    append: yes
  become: true

- name: "Grant passwordless sudo via {{ unprivileged_user_groupname }} group"
  community.general.sudoers:
    name: "{{ unprivileged_user_groupname }}"
    group: "{{ unprivileged_user_groupname }}"
    commands: ALL
  become: true

- name: "Add public key to authorized_keys from Host Machine"
  ansible.posix.authorized_key:
    user: "{{ unprivileged_user_username }}"
    state: present
    key: "{{ lookup('file', unprivileged_user_import_ssh_pub_key) }}"
  when: unprivileged_user_import_ssh_pub_key | default(False)
  become: true

- name: "Add public key to authorized_keys via GitHub"
  ansible.posix.authorized_key:
    user: "{{ unprivileged_user_username }}"
    state: present
    key: "https://github.com/{{ unprivileged_user_import_ssh_pub_key_github }}.keys"
  when: unprivileged_user_import_ssh_pub_key_github | default(False)
  become: true

- name: "Check /home/{{ unprivileged_user_username }}/.ssh/authorized_keys"
  ansible.builtin.stat:
    path: /home/{{ unprivileged_user_username }}/.ssh/authorized_keys
  register: authorized_keys_file
  become: true

- name: "Inherit authorized_keys from root user if none imported for {{ unprivileged_user_username }}"
  block:
    - name: "Check /root/.ssh/authorized_keys"
      ansible.builtin.stat:
        path: /root/.ssh/authorized_keys
      register: root_authorized_keys_file

    - name: "Copy /root/.ssh/authorized_keys"
      ansible.builtin.copy:
        remote_src: true
        src:  /root/.ssh/authorized_keys
        owner: "{{ unprivileged_user_username }}"
        mode: 0600
        dest: "/home/{{ unprivileged_user_username }}/.ssh/authorized_keys"
      when: root_authorized_keys_file.stat.exists

  when:
    - not authorized_keys_file.stat.exists
    - unprivileged_user_import_ssh_pub_key | default(True)
  become: true
