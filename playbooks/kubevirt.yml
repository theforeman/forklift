---
- hosts: all
  become: true
  vars:
    selinux_state: permissive
    kubernetes_version: 1.13.5
    pod_network: 10.244.0.0/16
    flannel_version: a70459be0084506e4ec919aa1c114638878db11b
    network_operator: 0.7.0
    kubevirt_version: v0.16.3
    ovs_cni_version: master
  roles:
    - selinux
    - epel_repositories
  tasks:
    - name: disable swap
      ansible.builtin.command: swapoff -a

    - name: deconfigure swap
      ansible.posix.mount:
        src: /swapfile
        fstype: swap
        path: none
        state: absent

    - name: modprobe br_netfilter
      community.general.modprobe:
        name: br_netfilter

    - name: configure bridge iptables
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: 1
        sysctl_file: /etc/sysctl.d/k8s.conf
      with_items:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables

    - name: install needed network manager libs
      ansible.builtin.yum:
        name:
        - NetworkManager-glib
        - NetworkManager

    - name: Configure bridge
      community.general.nmcli:
        state: present
        type: bridge
        conn_name: foreman

    - name: install docker
      ansible.builtin.yum:
        name: docker

    - name: enable docker
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: k8s repo
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled: yes
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        exclude: kube*

    - name: install kubelet kubeadm kubectl
      ansible.builtin.yum:
        name:
          - kubelet-{{ kubernetes_version }}
          - kubeadm-{{ kubernetes_version }}
          - kubectl-{{ kubernetes_version }}
        disable_excludes: kubernetes

    - name: create /etc/systemd/system/kubelet.service.d/
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d/
        state: directory

    - name: enable kubelet accounting
      ansible.builtin.copy:
        dest: /etc/systemd/system/kubelet.service.d/11-cgroups.conf
        content: |
          [Service]
          CPUAccounting=true
          MemoryAccounting=true

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: enable kubelet
      ansible.builtin.service:
        name: kubelet
        enabled: true
        state: started

    - name: init cluster
      ansible.builtin.command: kubeadm init --pod-network-cidr={{ pod_network }} --apiserver-advertise-address={{ ansible_eth0['ipv4']['address'] }}
      args:
        creates: /etc/kubernetes/admin.conf

    - name: untaint master
      ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/master-
      register: untaint_master
      failed_when: false
      changed_when: untaint_master.rc == 0
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy flannel
      ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/{{ flannel_version }}/Documentation/kube-flannel.yml
      args:
        creates: /etc/cni/net.d/10-flannel.conflist
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy network namespace
      ansible.builtin.command: kubectl apply -f https://github.com/kubevirt/cluster-network-addons-operator/releases/download/{{ network_operator }}/namespace.yaml
      args:
        creates: /etc/cni/net.d/multus.d/multus.kubeconfig
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy network crd
      ansible.builtin.command: kubectl apply -f https://github.com/kubevirt/cluster-network-addons-operator/releases/download/{{ network_operator }}/network-addons-config.crd.yaml
      args:
        creates: /etc/cni/net.d/multus.d/multus.kubeconfig
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy network operator
      ansible.builtin.command: kubectl apply -f https://github.com/kubevirt/cluster-network-addons-operator/releases/download/{{ network_operator }}/operator.yaml
      args:
        creates: /etc/cni/net.d/multus.d/multus.kubeconfig
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy kubevirt operator
      ansible.builtin.command: kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-operator.yaml
      args:
        creates: /var/lib/kubelet/device-plugins/kubevirt-tun.sock
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: deploy kubevirt cr
      ansible.builtin.command: kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-cr.yaml
      args:
        creates: /var/lib/kubelet/device-plugins/kubevirt-tun.sock
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: check for NetworkAddonsConfig
      ansible.builtin.command: kubectl get networkaddonsconfigs cluster
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      failed_when: false
      changed_when: false
      register: netaddonsconfig

    - name: prepare NetworkAddonsConfig file
      ansible.builtin.copy:
        dest: /tmp/netaddonsconfig
        content: |
          apiVersion: networkaddonsoperator.network.kubevirt.io/v1alpha1
          kind: NetworkAddonsConfig
          metadata:
            name: cluster
          spec:
            imagePullPolicy: Always
            kubeMacPool: {}
            multus: {}
            linuxBridge: {}
      when: netaddonsconfig.rc != 0

    - name: create NetworkAddonsConfig
      ansible.builtin.command: kubectl create -f /tmp/netaddonsconfig
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: netaddonsconfig.rc != 0

    - name: install virtctl
      ansible.builtin.get_url:
        url: https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/virtctl-{{ kubevirt_version }}-linux-amd64
        dest: /usr/bin/virtctl
        mode: u=rwx,g=rx,o=rx

    - name: wait for the network to be ready
      ansible.builtin.command: kubectl wait networkaddonsconfig cluster --for condition=Ready --timeout=300s
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: check for bridge-foreman NetworkAttachmentDefinition
      ansible.builtin.command: kubectl get net-attach-def bridge-foreman
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      failed_when: false
      changed_when: false
      register: bridge_foreman_net_attach

    - name: prepare bridge-foreman NetworkAttachmentDefinition file
      ansible.builtin.copy:
        dest: /tmp/bridge-foreman-net-attach-def
        content: |
          apiVersion: "k8s.cni.cncf.io/v1"
          kind: NetworkAttachmentDefinition
          metadata:
            name: bridge-foreman
          spec:
            config: '{
                "cniVersion": "0.3.1",
                "type": "bridge",
                "bridge": "foreman",
                "ipam": {}
              }'
      when: bridge_foreman_net_attach.rc != 0

    - name: create bridge-foreman NetworkAttachmentDefinition
      ansible.builtin.command: kubectl create -f /tmp/bridge-foreman-net-attach-def
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: bridge_foreman_net_attach.rc != 0

    - name: check for foreman-account ServiceAccount
      ansible.builtin.command: kubectl get sa foreman-account
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      failed_when: false
      changed_when: false
      register: foreman_service_sa

    - name: prepare foreman-account ServiceAccount file
      ansible.builtin.copy:
        dest: /tmp/foreman-account-sa
        content: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: foreman-account
            namespace: default
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: foreman-cluster-admin
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: foreman-account
            namespace: default
      when: foreman_service_sa.rc != 0

    - name: create foreman-account ServiceAccount
      ansible.builtin.command: kubectl create -f /tmp/foreman-account-sa
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: foreman_service_sa.rc != 0

    - name: create /home/vagrant/.kube
      ansible.builtin.file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant

    - name: deploy kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant

    - name: get foreman-account secret
      ansible.builtin.shell: "set -o pipefail && kubectl get secrets $(kubectl get sa foreman-account -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 -d | xargs"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      changed_when: false
      register: foreman_account_secret

    - name: show foreman-account secret
      ansible.builtin.debug:
        msg: "{{ foreman_account_secret.stdout }}"
